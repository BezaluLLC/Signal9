@model Signal9.Web.Models.DashboardViewModel
@{
    ViewData["Title"] = "RMM Dashboard";
    var useExampleData = ViewBag.UseExampleData ?? true;
    var errorMessage = ViewBag.ErrorMessage as string;
}

<div class="container-fluid">
    <!-- Header with Tenant Context and Controls -->
    <div class="row mb-4">
        <div class="col-12">
            <div class="d-flex justify-content-between align-items-center">
                <div>
                    <h1 class="h2 mb-1">RMM Dashboard</h1>
                    <nav aria-label="breadcrumb">
                        <ol class="breadcrumb mb-0">
                            <li class="breadcrumb-item"><i class="fas fa-building"></i></li>
                            <li class="breadcrumb-item active">@Model.TenantHierarchy.HierarchyPath</li>
                        </ol>
                    </nav>
                    
                    @if (!string.IsNullOrEmpty(errorMessage))
                    {
                        <div class="alert alert-warning alert-dismissible fade show mt-2" role="alert">
                            <i class="fas fa-exclamation-triangle me-2"></i>@errorMessage
                            <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
                        </div>
                    }
                </div>
                <div class="d-flex gap-2">
                    <!-- Example Data Toggle -->
                    <div class="btn-group" role="group">
                        <input type="checkbox" class="btn-check" id="exampleDataToggle" @(useExampleData ? "checked" : "") onchange="toggleExampleData(this.checked)">
                        <label class="btn btn-outline-secondary" for="exampleDataToggle">
                            <i class="fas fa-flask me-2"></i>Example Data
                        </label>
                    </div>
                    
                    <!-- Refresh Button -->
                    <button type="button" class="btn btn-outline-primary" onclick="refreshDashboard()">
                        <i class="fas fa-sync-alt me-2"></i>Refresh
                    </button>
                    
                    <!-- Tenant Selector -->
                    <div class="btn-group">
                        <button type="button" class="btn btn-outline-primary dropdown-toggle" data-bs-toggle="dropdown">
                            <i class="fas fa-sitemap me-2"></i>Switch Tenant
                        </button>
                        <ul class="dropdown-menu">
                            @foreach (var tenant in Model.TenantHierarchy.TenantTree)
                            {
                                <li><a class="dropdown-item" href="#" onclick="switchTenant('@tenant.TenantId')">
                                    <i class="fas fa-building me-2"></i>@tenant.Name
                                </a></li>
                                @foreach (var child in tenant.Children)
                                {
                                    <li><a class="dropdown-item ps-4" href="#" onclick="switchTenant('@child.TenantId')">
                                        <i class="fas fa-map-marker-alt me-2"></i>@child.Name
                                    </a></li>
                                    @foreach (var grandchild in child.Children)
                                    {
                                        <li><a class="dropdown-item ps-5" href="#" onclick="switchTenant('@grandchild.TenantId')">
                                            <i class="fas fa-users me-2"></i>@grandchild.Name
                                        </a></li>
                                    }
                                }
                            }
                        </ul>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Stats Cards -->
    <div class="row mb-4">
        <div class="col-xl-3 col-md-6 mb-3">
            <div class="card border-start border-primary border-4">
                <div class="card-body">
                    <div class="d-flex justify-content-between">
                        <div>
                            <div class="h5 mb-0 text-primary" data-stat="online-agents">@Model.Stats.OnlineAgents</div>
                            <div class="text-muted small">Online Agents</div>
                        </div>
                        <div class="text-primary">
                            <i class="fas fa-desktop fa-2x"></i>
                        </div>
                    </div>
                    <div class="mt-2">
                        <small class="text-muted">@Model.Stats.TotalAgents total</small>
                    </div>
                </div>
            </div>
        </div>
        
        <div class="col-xl-3 col-md-6 mb-3">
            <div class="card border-start border-danger border-4">
                <div class="card-body">
                    <div class="d-flex justify-content-between">
                        <div>
                            <div class="h5 mb-0 text-danger" data-stat="offline-agents">@Model.Stats.OfflineAgents</div>
                            <div class="text-muted small">Offline Agents</div>
                        </div>
                        <div class="text-danger">
                            <i class="fas fa-exclamation-triangle fa-2x"></i>
                        </div>
                    </div>
                    <div class="mt-2">
                        <small class="text-muted">Needs attention</small>
                    </div>
                </div>
            </div>
        </div>
        
        <div class="col-xl-3 col-md-6 mb-3">
            <div class="card border-start border-warning border-4">
                <div class="card-body">
                    <div class="d-flex justify-content-between">
                        <div>
                            <div class="h5 mb-0 text-warning" data-stat="pending-alerts">@Model.Stats.PendingAlerts</div>
                            <div class="text-muted small">Pending Alerts</div>
                        </div>
                        <div class="text-warning">
                            <i class="fas fa-bell fa-2x"></i>
                        </div>
                    </div>
                    <div class="mt-2">
                        <small class="text-muted">Requires review</small>
                    </div>
                </div>
            </div>
        </div>
        
        <div class="col-xl-3 col-md-6 mb-3">
            <div class="card border-start border-success border-4">
                <div class="card-body">
                    <div class="d-flex justify-content-between">
                        <div>
                            <div class="h5 mb-0 text-success" data-stat="active-tenants">@Model.Stats.ActiveTenants</div>
                            <div class="text-muted small">Active Tenants</div>
                        </div>
                        <div class="text-success">
                            <i class="fas fa-building fa-2x"></i>
                        </div>
                    </div>
                    <div class="mt-2">
                        <small class="text-muted">@Model.Stats.TotalTenants total</small>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="row">
        <!-- Tenant Hierarchy -->
        <div class="col-lg-4 mb-4">
            <div class="card h-100">
                <div class="card-header">
                    <h5 class="card-title mb-0">
                        <i class="fas fa-sitemap me-2"></i>Tenant Hierarchy
                    </h5>
                </div>
                <div class="card-body">
                    @foreach (var tenant in Model.TenantHierarchy.TenantTree)
                    {
                        <div class="tenant-node mb-3">
                            <div class="d-flex justify-content-between align-items-center p-2 bg-light rounded">
                                <div>
                                    <i class="fas fa-building text-primary me-2"></i>
                                    <strong>@tenant.Name</strong>
                                    <span class="badge bg-secondary ms-2">@tenant.Type</span>
                                </div>
                                <div class="text-end">
                                    <div class="small text-success">@tenant.OnlineAgentCount online</div>
                                    <div class="small text-muted">@tenant.AgentCount total</div>
                                </div>
                            </div>
                            
                            @foreach (var child in tenant.Children)
                            {
                                <div class="ms-4 mt-2">
                                    <div class="d-flex justify-content-between align-items-center p-2 bg-light rounded">
                                        <div>
                                            <i class="fas fa-map-marker-alt text-info me-2"></i>
                                            @child.Name
                                            <span class="badge bg-info ms-2">@child.Type</span>
                                        </div>
                                        <div class="text-end">
                                            <div class="small text-success">@child.OnlineAgentCount online</div>
                                            <div class="small text-muted">@child.AgentCount total</div>
                                        </div>
                                    </div>
                                    
                                    @foreach (var grandchild in child.Children)
                                    {
                                        <div class="ms-4 mt-2">
                                            <div class="d-flex justify-content-between align-items-center p-2 bg-light rounded">
                                                <div>
                                                    <i class="fas fa-users text-warning me-2"></i>
                                                    @grandchild.Name
                                                    <span class="badge bg-warning ms-2">@grandchild.Type</span>
                                                </div>
                                                <div class="text-end">
                                                    <div class="small text-success">@grandchild.OnlineAgentCount online</div>
                                                    <div class="small text-muted">@grandchild.AgentCount total</div>
                                                </div>
                                            </div>
                                        </div>
                                    }
                                </div>
                            }
                        </div>
                    }
                </div>
            </div>
        </div>

        <!-- Agent Status -->
        <div class="col-lg-8 mb-4">
            <div class="card h-100">
                <div class="card-header d-flex justify-content-between align-items-center">
                    <h5 class="card-title mb-0">
                        <i class="fas fa-desktop me-2"></i>Agent Status
                    </h5>
                    <button class="btn btn-outline-primary btn-sm">
                        <i class="fas fa-sync-alt me-1"></i>Refresh
                    </button>
                </div>
                <div class="card-body p-0">
                    <div class="table-responsive">
                        <table class="table table-hover mb-0">
                            <thead class="bg-light">
                                <tr>
                                    <th>Agent</th>
                                    <th>Status</th>
                                    <th>Tenant</th>
                                    <th>CPU</th>
                                    <th>Memory</th>
                                    <th>Last Seen</th>
                                    <th>Actions</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var agent in Model.Agents)
                                {
                                    <tr>
                                        <td>
                                            <div>
                                                <strong>@agent.MachineName</strong>
                                                <div class="small text-muted">@agent.OperatingSystem</div>
                                            </div>
                                        </td>
                                        <td>
                                            @if (agent.IsOnline)
                                            {
                                                <span class="badge bg-success">
                                                    <i class="fas fa-circle me-1"></i>Online
                                                </span>
                                            }
                                            else
                                            {
                                                <span class="badge bg-danger">
                                                    <i class="fas fa-circle me-1"></i>Offline
                                                </span>
                                            }
                                            <div class="small">@agent.Status</div>
                                        </td>
                                        <td>@agent.TenantName</td>
                                        <td>
                                            <div class="progress" style="height: 8px;">
                                                <div class="progress-bar @(agent.CpuUsage > 80 ? "bg-danger" : agent.CpuUsage > 60 ? "bg-warning" : "bg-success")" 
                                                     style="width: @agent.CpuUsage%"></div>
                                            </div>
                                            <small>@agent.CpuUsage.ToString("F1")%</small>
                                        </td>
                                        <td>
                                            <div class="progress" style="height: 8px;">
                                                <div class="progress-bar @(agent.MemoryUsage > 80 ? "bg-danger" : agent.MemoryUsage > 60 ? "bg-warning" : "bg-success")" 
                                                     style="width: @agent.MemoryUsage%"></div>
                                            </div>
                                            <small>@agent.MemoryUsage.ToString("F1")%</small>
                                        </td>
                                        <td>
                                            <span title="@agent.LastSeen.ToString("yyyy-MM-dd HH:mm:ss")">
                                                @{
                                                    var timeDiff = DateTime.UtcNow - agent.LastSeen;
                                                    string timeAgo = timeDiff.TotalMinutes < 1 ? "Just now" :
                                                                    timeDiff.TotalMinutes < 60 ? $"{(int)timeDiff.TotalMinutes}m ago" :
                                                                    timeDiff.TotalHours < 24 ? $"{(int)timeDiff.TotalHours}h ago" :
                                                                    $"{(int)timeDiff.TotalDays}d ago";
                                                }
                                                @timeAgo
                                            </span>
                                        </td>
                                        <td>
                                            <div class="btn-group btn-group-sm">
                                                <button class="btn btn-outline-primary" title="Remote Desktop">
                                                    <i class="fas fa-desktop"></i>
                                                </button>
                                                <button class="btn btn-outline-info" title="Send Command">
                                                    <i class="fas fa-terminal"></i>
                                                </button>
                                                <button class="btn btn-outline-secondary" title="Details">
                                                    <i class="fas fa-info-circle"></i>
                                                </button>
                                            </div>
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Recent Activities -->
    <div class="row">
        <div class="col-12">
            <div class="card">
                <div class="card-header">
                    <h5 class="card-title mb-0">
                        <i class="fas fa-history me-2"></i>Recent Activities
                    </h5>
                </div>
                <div class="card-body">
                    @foreach (var activity in Model.RecentActivities)
                    {
                        <div class="d-flex align-items-center mb-3 p-3 border rounded">
                            <div class="me-3">
                                @switch (activity.Severity)
                                {
                                    case "Warning":
                                        <i class="fas fa-exclamation-triangle text-warning fa-lg"></i>
                                        break;
                                    case "Error":
                                        <i class="fas fa-times-circle text-danger fa-lg"></i>
                                        break;
                                    default:
                                        <i class="fas fa-info-circle text-info fa-lg"></i>
                                        break;
                                }
                            </div>
                            <div class="flex-grow-1">
                                <div class="fw-bold">@activity.Description</div>
                                <div class="text-muted small">
                                    @activity.AgentName • @activity.TenantName • @activity.Timestamp.ToString("yyyy-MM-dd HH:mm")
                                </div>
                            </div>
                            <div class="text-muted small">
                                @activity.ActivityType
                            </div>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

<script>
    let currentTenantId = null;
    let useExampleData = @(useExampleData ? "true" : "false");
    let refreshInterval = null;

    function toggleExampleData(enabled) {
        useExampleData = enabled;
        refreshDashboard();
        
        // Store preference in localStorage
        localStorage.setItem('useExampleData', enabled.toString());
    }

    function refreshDashboard() {
        const url = new URL(window.location);
        url.searchParams.set('useExampleData', useExampleData);
        if (currentTenantId) {
            url.searchParams.set('tenantId', currentTenantId);
        }
        
        // Show loading indicator
        showLoadingIndicator();
        
        // Reload the page with new parameters
        window.location.href = url.toString();
    }

    function switchTenant(tenantId) {
        currentTenantId = tenantId;
        refreshDashboard();
    }

    function showLoadingIndicator() {
        // Add loading spinner to refresh button
        const refreshBtn = document.querySelector('[onclick="refreshDashboard()"]');
        if (refreshBtn) {
            const icon = refreshBtn.querySelector('i');
            if (icon) {
                icon.className = 'fas fa-spinner fa-spin me-2';
            }
            refreshBtn.disabled = true;
        }
    }

    // Auto-refresh every 30 seconds if not using example data
    function startAutoRefresh() {
        if (!useExampleData) {
            refreshInterval = setInterval(() => {
                refreshDashboard();
            }, 30000);
        }
    }

    function stopAutoRefresh() {
        if (refreshInterval) {
            clearInterval(refreshInterval);
            refreshInterval = null;
        }
    }

    // Load preference from localStorage on page load
    document.addEventListener('DOMContentLoaded', function() {
        const savedPreference = localStorage.getItem('useExampleData');
        if (savedPreference !== null) {
            const shouldUseExample = savedPreference === 'true';
            const checkbox = document.getElementById('exampleDataToggle');
            if (checkbox && checkbox.checked !== shouldUseExample) {
                checkbox.checked = shouldUseExample;
                useExampleData = shouldUseExample;
            }
        }
        
        // Start auto-refresh if using real data
        startAutoRefresh();
    });

    // Stop auto-refresh when page is hidden
    document.addEventListener('visibilitychange', function() {
        if (document.hidden) {
            stopAutoRefresh();
        } else {
            startAutoRefresh();
        }
    });

    // Real-time updates via API polling (alternative to full page refresh)
    async function updateDashboardData() {
        if (useExampleData) return; // Skip if using example data
        
        try {
            const params = new URLSearchParams();
            params.set('useExampleData', 'false');
            if (currentTenantId) {
                params.set('tenantId', currentTenantId);
            }
            
            const response = await fetch(`/api/dashboard?${params}`);
            if (response.ok) {
                const data = await response.json();
                updateStatsCards(data.stats);
                updateAgentTable(data.agents);
                updateActivities(data.recentActivities);
            }
        } catch (error) {
            console.warn('Failed to update dashboard data:', error);
        }
    }

    function updateStatsCards(stats) {
        // Update stats cards without full page reload
        const onlineAgentsElement = document.querySelector('[data-stat="online-agents"]');
        const offlineAgentsElement = document.querySelector('[data-stat="offline-agents"]');
        const pendingAlertsElement = document.querySelector('[data-stat="pending-alerts"]');
        const activeTenantsElement = document.querySelector('[data-stat="active-tenants"]');
        
        if (onlineAgentsElement) onlineAgentsElement.textContent = stats.onlineAgents;
        if (offlineAgentsElement) offlineAgentsElement.textContent = stats.offlineAgents;
        if (pendingAlertsElement) pendingAlertsElement.textContent = stats.pendingAlerts;
        if (activeTenantsElement) activeTenantsElement.textContent = stats.activeTenants;
    }

    function updateAgentTable(agents) {
        // Update agent table rows without full page reload
        // This would require more complex DOM manipulation
        // For now, we'll stick with full page refresh
    }

    function updateActivities(activities) {
        // Update recent activities section
        // This would require more complex DOM manipulation
        // For now, we'll stick with full page refresh
    }
</script>
